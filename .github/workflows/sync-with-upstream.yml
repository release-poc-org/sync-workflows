name: Syncs the repo with the upstream
on:
  workflow_call:
    secrets:
      upstream_read_token:
        required: true
      fork_read_write_token:
        required: true

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}

jobs:
    job_check_env_context:
        runs-on: ubuntu-latest
        outputs:
          workflow_enabled: ${{ steps.workflow_enabled_step.outputs.workflow_enabled }}
        steps:
          - name: The workflow location check has not passed
            id: warning_org
            if: github.repository_owner != vars.RELEASE_ORG
            run: >
              echo ::warning title=Workflow skipped::
              This workflow is skipped beacause this run
              is performed from a non-release GH org
    
          - name: The release environment checks have been passed, other jobs to be executed
            id: workflow_enabled_step
            if: (github.repository_owner == vars.RELEASE_ORG)
            run: echo "workflow_enabled=true" >> "$GITHUB_OUTPUT"

    job_sync_branches:
        needs: job_check_env_context
        if: needs.job_check_env_context.outputs.workflow_enabled == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Identify repos parameters
              id: get_repo_params
              env:
                FORKED_REPO: ${{ github.repository }}
                GH_TOKEN: ${{ secrets.fork_read_write_token }}
              run: |
                upstream_name=$(gh api repos/$FORKED_REPO  | jq -r ".source.full_name")
                default_branch=$(gh api repos/$FORKED_REPO | jq -r ".default_branch")
                echo "Identified upstream name: $upstream_name"
                echo "Identified default branch: $default_branch"
                echo "upstream_name=$upstream_name" >> "$GITHUB_OUTPUT"
                echo "default_branch=$default_branch" >> "$GITHUB_OUTPUT"
            
            - name: Identifying what to do with the branches
              id: identifying_branches_actions
              env:
                UPSTREAM_READ_TOKEN: ${{ secrets.upstream_read_token }}
                FORK_READ_WRITE_TOKEN: ${{ secrets.fork_read_write_token }}
                FORKED_REPO: ${{ github.repository }}
                UPSTREAM_REPO: ${{ steps.get_repo_params.outputs.upstream_name }}
                BRANCHES_TO_SYNC_EGREP_REGEX: ${{ vars.BRANCHES_TO_SYNC_EGREP_REGEX }}
                MAIN_BRANCH: ${{ steps.get_repo_params.outputs.default_branch }}
              run: |
                cd /tmp
                export GH_TOKEN="$UPSTREAM_READ_TOKEN"
                gh api --method GET --paginate \
                    -H "Accept: application/vnd.github+json" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    /repos/$UPSTREAM_REPO/branches \
                  | jq -r '.[] | .name' | sort > upstream_branches.txt

                export GH_TOKEN="$FORK_READ_WRITE_TOKEN"
                gh api --method GET --paginate \
                    -H "Accept: application/vnd.github+json" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    /repos/$FORKED_REPO/branches \
                  | jq -r '.[] | .name' | sort > fork_branches.txt

                echo $(grep -x -v -f upstream_branches.txt fork_branches.txt > branches_deleted_list.txt)
                echo $(grep -E "$BRANCHES_TO_SYNC_EGREP_REGEX" upstream_branches.txt | \
                  grep -v -E "^$MAIN_BRANCH$" >> branches_synced_list.txt)
                echo $(grep -x -v -f fork_branches.txt branches_synced_list.txt > branches_created_list.txt)
                echo $(grep -x -v -f branches_created_list.txt branches_synced_list.txt > upd_synced_list)
                mv upd_synced_list branches_synced_list.txt

                echo "### Branches update" >> $GITHUB_STEP_SUMMARY
                for FILE in branches_*_list.txt; do
                  ACTION=$(echo $FILE | cut -d '_' -f 2)
                  BRANCH_STAT_HEADER="Amount of branches to be $ACTION: $(cat $FILE | wc -l)"
                  echo "$BRANCH_STAT_HEADER" >> $GITHUB_STEP_SUMMARY
                  echo "$BRANCH_STAT_HEADER:"
                  echo "======"
                  cat  $FILE
                  echo "======"
                  echo ""
                done
              
            - name: Sync the Main/Master branch always first and separately
              id: sync_master_brach
              env:
                GH_TOKEN: ${{ secrets.fork_read_write_token }}
                FORKED_REPO: ${{ github.repository }}
                MAIN_BRANCH: ${{ steps.get_repo_params.outputs.default_branch }}
              run: gh repo sync $FORKED_REPO -b $MAIN_BRANCH

            - name: Clean the branches in the fork, not exist in the source now
              id: clean_fork_branches
              env:
                GH_TOKEN: ${{ secrets.fork_read_write_token }}
                FORKED_REPO: ${{ github.repository }}
                UPSTREAM_REPO: ${{ steps.get_repo_params.outputs.upstream_name }}
              run: |
                cd /tmp
                for BRANCH in $(cat branches_deleted_list.txt); do
                    echo -n "Deleting branch $BRANCH... "
                    gh api --method DELETE \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      /repos/$FORKED_REPO/git/refs/heads/$BRANCH
                    echo "done"
                done
            
            - name: Create missing branches in the fork
              id: create_missing_fork_branches
              env:
                UPSTREAM_READ_TOKEN: ${{ secrets.upstream_read_token }}
                FORK_READ_WRITE_TOKEN: ${{ secrets.fork_read_write_token }}
                FORKED_REPO: ${{ github.repository }}
                UPSTREAM_REPO: ${{ steps.get_repo_params.outputs.upstream_name }}
              run: |
                cd /tmp
                for BRANCH in $(cat branches_created_list.txt); do
                  export GH_TOKEN="$UPSTREAM_READ_TOKEN"
                  UPSTREAM_COMMIT=$(gh api --method GET \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      /repos/$UPSTREAM_REPO/git/ref/heads/$BRANCH \
                    | jq -r '.object.sha')
                  echo -n "Creating branch $BRANCH pointing to commit $UPSTREAM_COMMIT... "
                  export GH_TOKEN="$FORK_READ_WRITE_TOKEN"
                  STATUS=$(gh api --method POST \
                            -H "Accept: application/vnd.github+json" \
                            -H "X-GitHub-Api-Version: 2022-11-28" \
                            /repos/$FORKED_REPO/git/refs \
                            -f "ref=refs/heads/$BRANCH" \
                            -f "sha=$UPSTREAM_COMMIT" 2>/dev/null | jq -r .status)
                  if [[ $STATUS != "null" ]]; then
                    echo "NOT done"
                    echo -n "::warning title=Unable to create a branch::"
                    echo -n "Unable to create a branch $BRANCH to $UPSTREAM_COMMIT. "
                    echo -n "Perhaps this commit doesn't exist in the fork yet or "
                    echo  "the branch already exist?"  
                  else
                    echo "done"
                  fi
                done

            - name: Sync all the branches in the fork that match the sync settings
              id: sync_all_fork_branches
              env:
                UPSTREAM_READ_TOKEN: ${{ secrets.upstream_read_token }}
                FORK_READ_WRITE_TOKEN: ${{ secrets.fork_read_write_token }}
                FORKED_REPO: ${{ github.repository }}
                UPSTREAM_REPO: ${{ steps.get_repo_params.outputs.upstream_name }}
              run: |
                cd /tmp
                for BRANCH in $(cat branches_synced_list.txt); do
                  echo -n "Making branch $BRANCH up to date... "
                  export GH_TOKEN="$FORK_READ_WRITE_TOKEN"
                  gh repo sync $FORKED_REPO -b $BRANCH
                  echo "done"
                  export GH_TOKEN="$UPSTREAM_READ_TOKEN"
                  UPSTREAM_TIP=$(gh api --method GET \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      /repos/$UPSTREAM_REPO/git/ref/heads/$BRANCH \
                    | jq -r '.object.sha')
                  export GH_TOKEN="$FORK_READ_WRITE_TOKEN"
                  FORK_TIP=$(gh api --method GET \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      /repos/$FORKED_REPO/git/ref/heads/$BRANCH \
                    | jq -r '.object.sha')
                  if [[ $UPSTREAM_TIP != $FORK_TIP ]]; then
                    echo -n "::warning title=Desynced branch tip on $BRANCH::"
                    echo -n "Mismatch between the tips of the upstream and the fork, "
                    echo -n "$UPSTREAM_TIP and $FORK_TIP respectively. "
                    echo -n "The Fork's tip will be aligned with the Upstream's. "
                    echo -n "It could have happened because the Upstream was updated in a dirty way "
                    echo    "via a force-push or commit revert"
                    gh api --method PATCH \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      /repos/$FORKED_REPO/git/refs/heads/$BRANCH \
                      -f "sha=$UPSTREAM_TIP" \
                      -F "force=true" > /dev/null
                  fi
                done

            - name: Identify what to do with the tags
              id: identify_tags_actions
              env:
                UPSTREAM_READ_TOKEN: ${{ secrets.upstream_read_token }}
                FORK_READ_WRITE_TOKEN: ${{ secrets.fork_read_write_token }}
                FORKED_REPO: ${{ github.repository }}
                UPSTREAM_REPO: ${{ steps.get_repo_params.outputs.upstream_name }}
              run: |
                cd /tmp
                export GH_TOKEN="$UPSTREAM_READ_TOKEN"
                gh api --method GET --paginate \
                    -H "Accept: application/vnd.github+json" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    /repos/$UPSTREAM_REPO/tags \
                  | jq -r '.[] | "\(.commit.sha)=\(.name)"' > upstream_tags.txt

                export GH_TOKEN="$FORK_READ_WRITE_TOKEN"
                gh api --method GET --paginate \
                    -H "Accept: application/vnd.github+json" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    /repos/$FORKED_REPO/tags \
                  | jq -r '.[] | "\(.commit.sha)=\(.name)"' > fork_tags.txt

                echo $(grep -x -v -f upstream_tags.txt fork_tags.txt > tags_deleted_list.txt)
                echo $(grep -x -v -f fork_tags.txt upstream_tags.txt > tags_created_list.txt)
              
                echo "### Tags update" >> $GITHUB_STEP_SUMMARY
                for FILE in tags_*_list.txt; do
                  ACTION=$(echo $FILE | cut -d '_' -f 2)
                  TAGS_STAT_HEADER="Amount of tags to be $ACTION: $(cat $FILE | wc -l)"
                  echo "$TAGS_STAT_HEADER" >> $GITHUB_STEP_SUMMARY
                  echo "$TAGS_STAT_HEADER:"
                  echo "======"
                  cat  $FILE
                  echo "======"
                  echo ""
                done

            - name: Remove tags in the fork, missing in the source
              id: clean_fork_tags
              env:
                GH_TOKEN: ${{ secrets.fork_read_write_token }}
                FORKED_REPO: ${{ github.repository }}
                UPSTREAM_REPO: ${{ steps.get_repo_params.outputs.upstream_name }}
              run: |
                cd /tmp
                for COMMIT_TAG in $(cat tags_deleted_list.txt); do
                    TAG_NAME=$(echo $COMMIT_TAG | cut -d '=' -f 2-)
                    TAG_SHA=$(echo $COMMIT_TAG | cut -d '=' -f 1)
                    echo -n "Deleting tag $TAG_NAME ($TAG_SHA)... "
                    gh api --method DELETE \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      /repos/$FORKED_REPO/git/refs/tags/$TAG_NAME
                    echo "done"
                done
            
            - name: Create missing tags in the fork
              id: create_missing_fork_tags
              env:
                GH_TOKEN: ${{ secrets.fork_read_write_token }}
                FORKED_REPO: ${{ github.repository }}
                UPSTREAM_REPO: ${{ steps.get_repo_params.outputs.upstream_name }}
              run: |
                cd /tmp
                for COMMIT_TAG in $(cat tags_created_list.txt); do
                  TAG_NAME=$(echo $COMMIT_TAG | cut -d '=' -f 2-)
                  TAG_SHA=$(echo $COMMIT_TAG | cut -d '=' -f 1)
                  echo -n "Creating tag $TAG_NAME pointing to commit $TAG_SHA... "
                  STATUS=$(gh api --method POST \
                            -H "Accept: application/vnd.github+json" \
                            -H "X-GitHub-Api-Version: 2022-11-28" \
                            /repos/$FORKED_REPO/git/refs \
                            -f "ref=refs/tags/$TAG_NAME" \
                            -f "sha=$TAG_SHA" 2>/dev/null | jq -r .status)
                  if [[ $STATUS != "null" ]]; then
                    echo "NOT done"
                    echo -n "::warning title=Unable to create a tag::"
                    echo -n "Unable to create a tag $TAG_NAME to $TAG_SHA. "
                    echo -n "Perhaps this commit doesn't exist in the fork yet or "
                    echo  "the tag already exist?"  
                  else
                    echo "done"
                  fi
                done
